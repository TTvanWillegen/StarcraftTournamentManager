group 'nl.tobyvanwillegen'
version '1.0'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4")
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8
ext.junitPlatformVersion = '1.0.0'
ext.junitJupiterVersion  = '5.0.0'


configurations {
    checkerFrameworkJavac {
        description = 'a customization of the Open JDK javac compiler with additional support for type annotations'
    }
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}
checkstyle {
    configFile rootProject.file('GoogleChecks.xml')
    showViolations = true
    ignoreFailures = false
    toolVersion = '8.2'
    //TODO: Add maxWarnings and maxErrors
}

dependencies {
    //Checker
    ext.checkerFrameworkVersion = '2.2.0'
    ext.jdkVersion = JavaVersion.current().isJava8() ? 'jdk8' : 'jdk9'
    checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
    checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
    compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}

junitPlatform {
    reportsDir file('build/test-results/test')
}
junitPlatform.finalizedBy jacocoTestReport

tasks.withType(JavaCompile).all { JavaCompile compile ->
    compile.options.compilerArgs = [
            '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
            '-processorpath', "${configurations.checkerFramework.asPath}",
            // uncomment to turn Checker Framework errors into warnings
            //'-Awarns',
            "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
            '-source', '8', '-target', '8'
    ]
    options.fork = true
    options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
}


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}
check.dependsOn jacocoTestReport